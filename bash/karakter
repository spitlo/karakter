#!/usr/bin/env bash
# shellcheck disable=SC2034
set -e

# Colors
BLUE='\033[1;34m'
BROWN='\033[0;33m'
GREEN='\033[1;32m'
NC='\033[0m'
YELLOW='\033[1;33m'

# Defaults
OBFUSCATION_LO="10"
OBFUSCATION_MD="50"
OBFUSCATION_HI="100"
OBFUSCATION_CHANCE="$OBFUSCATION_MD"
OBFUSCATION_FT="fairytale"
OBFUSCATION_CP="cyberpunk"
OBFUSCATION_LM="loudmouth"
OBFUSCATION_MT="moneytalk"
OBFUSCATION_NS="numbers"
OBFUSCATION_STYLE="standard"
SETS_DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )/sets" && pwd )

USAGE="
${BROWN}Usage${NC}: $0 [ARGUMENTS] [FILE|STRING]
Add a little character to your text by substituting visually similar glyphs for letters a-z and A-Z.
There are three ways to supply input text to this script:
  ${GREEN}1${NC}) Add a file as argument
  ${GREEN}2${NC}) Add word or words as arguments
  ${GREEN}3${NC}) Pipe text to it

${BROWN}Options${NC}:
  [--lo|--md|--hi]    Level of obfuscation.
                      Defaults to 'md', medium.
  [--{ft|cp|lm|mt|ns}]   Obfuscation style: fairytale,
                      cyberpunk, loudmouth, moneytalk
                      or numbers.
                      If unset, defaults to a kitchen
                      sink mix of styles.
"
HELP="
${BROWN}Usage examples${NC}:
  Highly obfuscate text from a file on your filesystem:
  \$ ${BLUE}bash/karakter test.txt --hi${NC}

  Generate a mildly elvish version of your name for an email signature:
  \$ ${BLUE}bash/karakter --md --ft John Doe${NC}

  Turn A Tale of Two Cities into a cyberpunk novel and read it in your terminal:
  \$ ${BLUE}cat test.txt | tr a-z A-Z | bash/karakter --hi --cp | less${NC}
"

function handle_character() {
  character="$1"
  case "$character" in
    "")
      # Don’t ask me why, but spaces come through as ""
      echo -n " "
      ;;
    [a-zA-Z])
      # If a-z or A-Z, find an alternative character, but first test against
      # obfuscation chance to se if we should bail early
      random_number=$((RANDOM % 100))
      if [ "$random_number" -gt "$OBFUSCATION_CHANCE" ]; then
        echo -n "$character"
      else
        # Try to put the string from <character> variable into a temp variable
        temp_characters="${!character}"
        if [ -n "$temp_characters" ]; then
          # If we found a string of alternative characters, pick one at random and print
          special_character="${temp_characters:$((RANDOM % ${#temp_characters})):1}"
          echo -n "$special_character"
        else
          # If not, just print the original character
          echo -n "$character"
        fi
      fi
      ;;
    *)
      # This is one of the characters we don’t transform, just print it
      echo -n "$character"
      ;;
  esac
}

function handle_line() {
  line="$1"
  while read -rn1 character; do
    handle_character "$character"
  done < <(echo "$line")
  echo
}

argument=""

# Handle args
for arg in "$@"; do
  if [ "$arg" = "--lo" ] || [ "$arg" = "--md" ] || [ "$arg" = "--hi" ]; then
    case "$arg" in
      "--lo")
        OBFUSCATION_CHANCE="$OBFUSCATION_LO"
        ;;
      "--md")
        OBFUSCATION_CHANCE="$OBFUSCATION_MD"
        ;;
      *)
        OBFUSCATION_CHANCE="$OBFUSCATION_HI"
        ;;
    esac
  elif [ "$arg" = "--cp" ] || [ "$arg" = "--ft" ] || [ "$arg" = "--lm" ] || [ "$arg" = "--mt" ] || [ "$arg" = "--ns" ]; then
    case "$arg" in
      "--cp")
        OBFUSCATION_STYLE="$OBFUSCATION_CP"
        ;;
      "--lm")
        OBFUSCATION_STYLE="$OBFUSCATION_LM"
        ;;
      "--mt")
        OBFUSCATION_STYLE="$OBFUSCATION_MT"
        ;;
      "--ns")
        OBFUSCATION_STYLE="$OBFUSCATION_NS"
        ;;
      *)
        OBFUSCATION_STYLE="$OBFUSCATION_FT"
        ;;
    esac
  elif [ "$arg" = "help" ] || [ "$arg" = "--help" ] || [ "$arg" = "-h" ]; then
    echo -e "$USAGE$HELP"
    exit 0
  else
    # Concatenating this to existing string instead of simply setting it allows us to
    # accept unquoted sentences as arguments.
    argument="$argument $arg"
  fi
done

# Load the correct set of characters
case "$OBFUSCATION_STYLE" in
  "cyberpunk")
    # shellcheck source=/dev/null
    source "$SETS_DIR/cyberpunk.set"
    ;;
  "fairytale")
    # shellcheck source=/dev/null
    source "$SETS_DIR/fairytale.set"
    ;;
  "loudmouth")
    # shellcheck source=/dev/null
    source "$SETS_DIR/loudmouth.set"
    ;;
  "moneytalk")
    # shellcheck source=/dev/null
    source "$SETS_DIR/moneytalk.set"
    ;;
  "numbers")
    # shellcheck source=/dev/null
    source "$SETS_DIR/numbers.set"
    ;;
  *)
    # shellcheck source=/dev/null
    source "$SETS_DIR/standard.set"
    ;;
esac

# Check if input is piped; if so read it character for character. If not,
# see if argument supplied is a file and read it character for character.
# If neither of these are true, assume the argument is a string of text.
trimmed_arguments="${argument// }"
if [ -t 0 ]; then
  # If no arguments are supplied, print help and exit
  if [ "$trimmed_arguments" = "" ]; then
    echo -e "$USAGE"
    exit 0
  fi
  if [ -f "$trimmed_arguments" ]; then
    while read -re line; do
      handle_line "$line"
    done < <(cat "$trimmed_arguments")
  else
    # Last try: Assume this is a string
    while read -re line; do
      handle_line "$line"
    done < <(echo "$argument")
  fi
else
  while IFS= read -re line; do
    handle_line "$line"
  done
fi

echo
