#!/usr/bin/env bash
# shellcheck disable=SC1090
set -eu
trap 'catch $?' EXIT

# Constants
BLUE='\033[1;34m'
BROWN='\033[0;33m'
GREEN='\033[1;32m'
NC='\033[0m'
RED='\033[0;31m'
COMMANDS="
  nim
  v
  zig
"
COMMANDS="$(echo "$COMMANDS" | tr ' ' '\n' | sort -u | xargs)"
USAGE="${BROWN}Usage${NC}: $0 [command || flags]

Utility script to build one or all versions of karakter

${BROWN}Commands${NC}:
${GREEN}${COMMANDS}

${BROWN}Options${NC}:
  --help, -h      Show this text.
  --list, -l      Show a list of commands we can update.
"

# os="linux"
# if [[ "$OSTYPE" =~ ^darwin ]]; then
#   cpu=$(uname -p)
#   if [[ "$cpu" = "i386" ]]; then
#     os="macos"
#   else
#     os="macos-arm"
#   fi
# elif [[ "$OSTYPE" = "linux-android" ]]; then
#   os="termux"
# elif [[ "$OSTYPE" = "linux-gnueabihf" ]]; then
#   os="raspberry"
# fi

mkdir -p ~/tmp

# --------------------------------
#    __  ____  _ ___ __           ____                 __  _
#   / / / / /_(_) (_) /___  __   / __/_  ______  _____/ /_(_)___  ____  _____
#  / / / / __/ / / / __/ / / /  / /_/ / / / __ \/ ___/ __/ / __ \/ __ \/ ___/
# / /_/ / /_/ / / / /_/ /_/ /  / __/ /_/ / / / / /__/ /_/ / /_/ / / / (__  )
# \____/\__/_/_/_/\__/\__, /  /_/  \__,_/_/ /_/\___/\__/_/\____/_/ /_/____/
#                    /____/
function catch() {
  if [[ "$1" = "127" ]]; then
    # 127 is "Command not found". If it’s not installed, building will throw an error.
    # This is legacy code, the `exists` command should take care of this now-
    echo -e "Error building with ${BLUE}$cmd${NC}. Perhaps it’s not installed yet?"
  fi
}

function print_help() {
  echo -e "$USAGE"
  exit 0
}

function exists() {
  local cmd
  cmd=${1:?"Please supply a language to build for."}
  command -v "$cmd" >/dev/null 2>&1 && { return 0; } || { return 1; }
}

function print_heading() {
  echo -e "\n$1"
  printf %${#1}s'\n' ' ' | tr " " "="
}

function print_versions() {
  echo -e "${YELLOW}Local version${NC}: $1"
  echo -e "${YELLOW}Latest version${NC}: $2"
}

function get_confirmation() {
  print_versions "$1" "$2"
  read -erp "Continue? (y/n) " -n 1
  if [[ "$REPLY" != "y" ]]; then
    echo -e "\nOk, quitting!\n${BLUE}Bye!${NC}"
    exit 0
  fi
}

# --------------------------------
#     ____        _ __    __   ______                 __  _
#    / __ )__  __(_) /___/ /  / ____/_  ______  _____/ /_(_)___  ____  _____
#   / __  / / / / / / __  /  / /_  / / / / __ \/ ___/ __/ / __ \/ __ \/ ___/
#  / /_/ / /_/ / / / /_/ /  / __/ / /_/ / / / / /__/ /_/ / /_/ / / / (__  )
# /_____/\__,_/_/_/\__,_/  /_/    \__,_/_/ /_/\___/\__/_/\____/_/ /_/____/
#
function build_all() {
  echo "Building all versions"
  # shellcheck disable=SC2206
  declare -a cmd_list=( $COMMANDS  )
  for cmd in "${cmd_list[@]}"; do
    "build_$cmd"
    echo
  done
}

function build_nim() {
  echo -e "Building ${BLUE}nim${NC} version"
  if exists nimble; then
    cd nim && nimble build karakter && cd ..
  else
    echo -e "${RED}Error:${NC}"
    echo -e "You seem to be missing ${BLUE}nim${NC}."
    echo -e "Install it from:\nhttps://nim-lang.org/install.html"
  fi
}

function build_v() {
  echo -e "Building ${BLUE}v${NC} version"
  if exists v; then
    cd v && v build && cd ..
  else
    echo -e "${RED}Error:${NC}"
    echo -e "You seem to be missing ${BLUE}v${NC}."
    echo -e "Install it from:\nhttps://vlang.io/"
  fi
}

function build_zig() {
  echo -e "Building ${BLUE}zig${NC} version"
  if exists zig; then
    cd zig && zig build && mv zig-out/bin/karakter . && cd ..
  else
    echo -e "${RED}Error:${NC}"
    echo -e "You seem to be missing ${BLUE}zig${NC}."
    echo -e "Install it from:\nhttps://ziglang.org/download/"
  fi
}

# If user supplied no arguments, print help and exit
if [[ $# = 0 ]]; then
  print_help
fi

# Handle arguments
for arg in "$@"; do
  if [[ "$arg" = "--help" ]] || [[ "$arg" = "-h" ]]; then
    echo -e "$USAGE"
    exit 0
  elif [[ "$arg" = "--list" ]] || [[ "$arg" = "-l" ]]; then
    echo "$COMMANDS"
    exit 0
  elif [[ "$arg" = "all" ]]; then
    build_all
    exit 0
  else
    cmd="$arg"
  fi
done

# Handle command
case " $COMMANDS " in
  *" $cmd "*) build_"$cmd" ;;
  *) print_help ;;
esac